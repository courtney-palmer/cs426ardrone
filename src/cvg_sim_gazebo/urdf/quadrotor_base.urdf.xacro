<?xml version="1.0"?>

<robot xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor"
xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller"
xmlns:interface="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface"
xmlns:xacro="http://ros.org/wiki/xacro"
>

  <xacro:include filename="$(find cvg_sim_gazebo_plugins)/urdf/quadrotor_plugins.urdf.xacro" />
  <property name="pi" value="3.1415926535897931" />

  <!-- Main quadrotor link -->
  <xacro:macro name="quadrotor_base_macro">
    <link name="base_link">

      <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh filename="package://cvg_sim_gazebo/meshes/quadrotor/quadrotor_4.dae"/>
        </geometry>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <mesh filename="package://cvg_sim_gazebo/meshes/quadrotor/quadrotor_4.stl"/>
        </geometry>
      </collision>

    </link>


    <link name="dummy_link">

	      <inertial>
        	<mass value="1.477" />
        	<origin xyz="0 0 0" />
        	<inertia ixx="0.01152" ixy="0.0" ixz="0.0" iyy="0.01152" iyz="0.0" izz="0.0218" />
      	      </inertial>

    </link>

    <joint name="dummy_joint" type="fixed">
 	 <parent link="base_link"/>
         <child link="dummy_link"/>
    </joint>



    <!-- Give the base link a unique name -->
    <link name="base">

      <!-- Offset the base by half the lenght of the cylinder -->
      <pose>0 0 0.029335 0 0 0</pose>

      <inertial>
        <mass value = ".00001"/>
        
        <inertia ixx="0.001087473" ixy="0.0" ixz="0.0" iyy="0.001087473" iyz="0.0" izz="0.001092437" />
      </inertial>

     <!-- <collision name="base_collision">
        <geometry>
          <cylinder radius=".04267" length=".05867"/>
        </geometry>
      </collision> -->

      <!-- The visual is mostly a copy of the collision -->
      <visual name="base_visual">
        <geometry>
          <cylinder radius=".04267" length=".05867"/>
        </geometry>
      </visual>
    </link>




    <!-- Give the base link a unique name -->
    <link name="top">

      
      <!-- Vertically offset the top cylinder by the length of the bottom
          cylinder and half the length of this cylinder. -->
      <pose>0 0 0.095455 0 0 0</pose>

      <inertial>
        <mass value = ".00001"/>
        
        <inertia ixx="0.000090623" ixy="0.0" ixz="0.0" iyy="0.000090623" iyz="0.0" izz="0.000091036" />
      </inertial>

      <!-- <collision name="top_collision">
        <geometry>
          <cylinder radius="0.04267" length="0.07357"/>
        </geometry>
      </collision> -->

      <!-- The visual is mostly a copy of the collision -->
      <visual name="top_visual">
        <geometry>
          <cylinder radius="0.04267" length="0.07357"/>
        </geometry>
      </visual>

      <gazebo reference="top">
        <plugin name="lidar_control" filename="liblidar_plugin.so">
          <velocity>0.5</velocity>
        </plugin>
      </gazebo>

    </link>



    <!-- Each joint must have a unique name -->
    <joint type="revolute" name="revolving_joint">

    <!-- Position the joint at the bottom of the top link -->
      <origin xyz="0 0 -0.036785" rpy=" 0 0 0"/>

      <!-- Use the base link as the parent of the joint -->
      <parent link="base"/>

      <!-- Use the top link as the child of the joint -->
      <child link="top"/>

      <!-- The axis defines the joint's degree of freedom -->
      <axis xyz="0 0 1"/>

      <!-- Limit refers to the range of motion of the joint -->
      <limit lower="-10000000000000000" upper="10000000000000000" effort="10" velocity="0"/>
      
    </joint>



    <joint name="lidar_joint" type="fixed">
         <origin xyz="0 0 -0.05" rpy="0 0 0"/>
 	 <parent link="base_link"/>
         <child link="base"/>
    </joint>



    <gazebo reference="base_link">
      <turnGravityOff>false</turnGravityOff>
    </gazebo>

    <gazebo reference="top">
      <!-- Add a ray sensor, and give it a name -->
      <sensor type="ray" name="sensor">

        <!-- Position the ray sensor based on the specification. Also rotate
             it by 90 degrees around the X-axis so that the <horizontal> rays
             become vertical -->
        <pose>0 0 -0.004645 1.5707 0 0</pose>

        <!-- Enable visualization to see the rays in the GUI -->
        <visualize>true</visualize>

        <!-- Set the update rate of the sensor -->
        <update_rate>30</update_rate>

        <ray>

          <noise>
            <!-- Use gaussian noise -->
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.02</stddev>
          </noise>

          <!-- The scan element contains the horizontal and vertical beams.
               We are leaving out the vertical beams for this tutorial. -->
          <scan>

            <!-- The horizontal beams -->
            <horizontal>
              <!-- The velodyne has 32 beams(samples) -->
              <samples>32</samples>

              <!-- Resolution is multiplied by samples to determine number of
                   simulated beams vs interpolated beams. See:
                   http://sdformat.org/spec?ver=1.6&elem=sensor#horizontal_resolution
                   -->
              <resolution>1</resolution>

              <!-- Minimum angle in radians -->
              <min_angle>-0.53529248</min_angle>

              <!-- Maximum angle in radians -->
              <max_angle>0.18622663</max_angle>
            </horizontal>
          </scan>

          <!-- Range defines characteristics of an individual beam -->
          <range>

            <!-- Minimum distance of the beam -->
            <min>0.05</min>

            <!-- Maximum distance of the beam -->
            <max>70</max>

            <!-- Linear resolution of the beam -->
            <resolution>0.02</resolution>
          </range>
        </ray>

        <plugin name="lidar_scan" filename="liblidar_sensor_plugin.so">
            <topicName>laser_scan</topicName>
            <robotNamespace>/</robotNamespace>
        </plugin>

      </sensor>
    </gazebo>

    <!-- Gazebo Plugins -->
    <quadrotor_plugins/>
  </xacro:macro>
</robot>
